import UIKit

final class MovieQuizViewController: UIViewController, QuestionFactoryDelegate {

    // MARK: - UI –≠–ª–µ–º–µ–Ω—Ç—ã
    @IBOutlet private weak var counterLabel: UILabel!
    @IBOutlet private weak var imageView: UIImageView!
    @IBOutlet private weak var textLabel: UILabel!
    @IBOutlet private weak var questionTitleLabel: UILabel!

    // MARK: - –î–∞–Ω–Ω—ã–µ
    private var currentQuestionIndex: Int = 0
    private var correctAnswers: Int = 0
    private let questionsAmount: Int = 10
    private var questionFactory: QuestionFactoryProtocol?
    private var currentQuestion: QuizQuestion?

    // MARK: - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ StatisticService
    private var statisticService: StatisticService!
    
    // MARK: - Alert Presenter
    private var alertPresenter: ResultAlertPresenter!

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupQuestionFactory()
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º statisticService —Å –ø–æ–º–æ—â—å—é –∫–ª–∞—Å—Å–∞ StatisticServiceImplementation
        statisticService = StatisticServiceImplementation()
        alertPresenter = ResultAlertPresenter(viewController: self)
        questionFactory?.requestNextQuestion()
    }

    // MARK: - QuestionFactoryDelegate
    func didReceiveNextQuestion(question: QuizQuestion?) {
        print("üì© –í–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏: \(question?.text ?? "nil")")
        guard let question = question else {
            print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω nil-–≤–æ–ø—Ä–æ—Å")
            return
        }
        currentQuestion = question
        let viewModel = convert(model: question)
        DispatchQueue.main.async { [weak self] in
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º...")
            self?.show(quiz: viewModel)
            self?.view.isUserInteractionEnabled = true // ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
        }
    }

    // MARK: - UI –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    private func setupUI() {
        imageView.contentMode = .scaleAspectFill
        imageView.layer.cornerRadius = 20
        imageView.clipsToBounds = true
        imageView.layer.borderWidth = 8
        imageView.layer.borderColor = UIColor.clear.cgColor
    }

    // MARK: - –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏
    private func setupQuestionFactory() {
        let questionFactory = QuestionFactory(delegate: self)
        self.questionFactory = questionFactory
    }

    // MARK: - –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    private func showNextQuestion() {
        print("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∏–Ω–¥–µ–∫—Å: \(currentQuestionIndex)")
        view.isUserInteractionEnabled = true // ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
        questionFactory?.requestNextQuestion()
    }

    private func convert(model: QuizQuestion) -> QuizStepViewModel {
        return QuizStepViewModel(
            image: UIImage(named: model.image) ?? UIImage(systemName: "photo")!,
            question: model.text,
            questionNumber: "\(currentQuestionIndex + 1)/\(questionsAmount)"
        )
    }

    private func show(quiz step: QuizStepViewModel) {
        print("üñº UI –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º: \(step.question)")
        imageView.image = step.image
        textLabel.text = step.question
        counterLabel.text = step.questionNumber
        // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–≤–µ—Ç
        imageView.layer.borderColor = UIColor.clear.cgColor
    }

    @IBAction private func yesButtonClicked(_ sender: UIButton) {
        print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–∞'")
        checkAnswer(true)
    }

    @IBAction private func noButtonClicked(_ sender: UIButton) {
        print("‚ùå –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–µ—Ç'")
        checkAnswer(false)
    }

    private func checkAnswer(_ answer: Bool) {
        self.view.isUserInteractionEnabled = false
        guard let currentQuestion = currentQuestion else {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: currentQuestion = nil!")
            return
        }
        print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞. –û–∂–∏–¥–∞–µ–º—ã–π: \(currentQuestion.correctAnswer), –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: \(answer)")
        showAnswerResult(isCorrect: answer == currentQuestion.correctAnswer)
    }

    private func showAnswerResult(isCorrect: Bool) {
        print("üìä –û—Ç–≤–µ—Ç \(isCorrect ? "–≤–µ—Ä–Ω—ã–π ‚úÖ" : "–Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå")")
        if isCorrect { correctAnswers += 1 }
        imageView.layer.borderColor = (isCorrect ? UIColor(hex: "#60C28E") : UIColor(hex: "#F56B6C"))?.cgColor
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in
            guard let self = self else { return }
            print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...")
            if self.currentQuestionIndex < self.questionsAmount - 1 {
                self.currentQuestionIndex += 1
                self.showNextQuestion()
            } else {
                self.showFinalResults()
            }
        }
    }

    // MARK: - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    private func showFinalResults() {
        print("üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –ò—Ç–æ–≥: \(correctAnswers)/\(questionsAmount)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —á–µ—Ä–µ–∑ statisticService
        statisticService.store(correct: correctAnswers, total: questionsAmount)
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let currentGameText = "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(correctAnswers)/\(questionsAmount)"
        let gamesCountText = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä: \(statisticService.gamesCount)"
        let bestGame = statisticService.bestGame
        let bestGameText = "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(bestGame.correct)/\(bestGame.total) (\(bestGame.date.dateTimeString))"
        let accuracyText = "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: \(String(format: "%.2f", statisticService.totalAccuracy))%"
        
        let statsMessage = """
        \(currentGameText)
        \(gamesCountText)
        \(bestGameText)
        \(accuracyText)
        """
        
        let viewModel = QuizResultsViewModel(
            title: "–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω!",
            text: statsMessage,
            buttonText: "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑"
        )
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ResultAlertPresenter –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        alertPresenter.showAlert(with: viewModel) { [weak self] in
            guard let self = self else { return }
            self.currentQuestionIndex = 0
            self.correctAnswers = 0
            self.showNextQuestion()
        }
    }
}
